function mkd()
{
    mkdir -p "$@" && cd "$@"
}

cleanDockerImages()
{
    docker ps -a | grep 'Exited' | awk '{print $1}' | xargs docker rm
    docker images -aq | xargs docker rmi
}

cleanDockerImagesForce()
{
    docker volume rm $(docker volume ls -qf dangling=true)
    docker volume rm $(docker volume ls -qf dangling=false)
}

dockerRemoveDangling()
{
  docker images -f 'dangling=true' -q | awk '{print $1}' | xargs -L1 docker rmi
}

dockerUpdateAll()
{
  docker images --format '{{.Repository}} {{.Tag}}' | awk '{print $1 ":" $2}' | grep -iv 'repository' | xargs -L1 docker pull
}

dockerPsClean()
{
  docker ps -a --format '{{.Names}} {{.Status}}' | grep 'Exited' | awk '{print $1}' | xargs docker rm
}

dockerUI()
{
  docker run -dp 9001:9000 --privileged -v /var/run/docker.sock:/var/run/docker.sock uifd/ui-for-docker
}

dockerStart()
{
    dockerStop
    if [[ -e $(pwd)/docker-compose.yml ]]; then
        docker-compose build
        docker-compose up -d
        docker-compose ps
    else
        docker build -t "${PWD##*/}" .
        docker run -P --rm -d -it --name "${PWD##*/}"_build "${PWD##*/}"
        docker ps -a
    fi
}

dockerStop()
{
    if [[ -e $(pwd)/docker-compose.yml ]]; then
        docker-compose stop
        docker-compose rm
        dockerPsClean
    else
        docker stop "${PWD##*/}"_build
        docker rmi "${PWD##*/}"_build
        dockerPsClean
    fi

    docker-clean
}

