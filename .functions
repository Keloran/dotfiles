function mkd()
{
    mkdir -p "$@" && cd "$@"
}

cleanDockerImages()
{
    docker ps -a | grep 'Exited' | awk '{print $1}' | xargs docker rm
    docker images -aq | xargs docker rmi
}

cleanDockerImagesForce()
{
    docker volume rm $(docker volume ls -qf dangling=true)
    docker volume rm $(docker volume ls -qf dangling=false)
}

dockerRemoveDangling()
{
  docker images -f 'dangling=true' -q | awk '{print $1}' | xargs -L1 docker rmi
}

dockerUpdateAll()
{
  docker images --format '{{.Repository}} {{.Tag}}' | awk '{print $1 ":" $2}' | grep -iv 'repository' | xargs -L1 docker pull
}

dockerPsClean()
{
  docker ps -a --format '{{.Names}} {{.Status}}' | grep 'Exited' | awk '{print $1}' | xargs docker rm
}

dockerUI()
{
  docker run -dp 9001:9000 --privileged -v /var/run/docker.sock:/var/run/docker.sock uifd/ui-for-docker
}

dockerBench()
{
  docker run -it --net host --pid host --userns host --cap-add audit_control \
    -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
    -v /var/lib:/var/lib \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /Users/maxhooton/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux:/usr/lib/systemd \
    -v /etc:/etc --label docker_bench_security \
    docker/docker-bench-security
}

dockerStart()
{
    dockerStop
    if [[ -e $(pwd)/docker-compose.yml ]]; then
        docker-compose build
        docker-compose up -d
        docker-compose ps
    else
    	dockerpath=$(basename ${PWD##*/} | tr 'A-Z' 'a-z')
        docker build -t "$dockerpath" .
        docker run -P --rm -d -it --name "$dockerpath"_build "$dockerpath"
        docker ps -a
    fi
}

dockerStop()
{
    if [[ -e $(pwd)/docker-compose.yml ]]; then
        docker-compose stop
        yes | docker-compose rm
        dockerPsClean
    else
    	dockerpath=$(basename ${PWD##*/} | tr 'A-Z' 'a-z')

        docker stop "$dockerpath"_build
        docker rmi "$dockerpath"_build
        dockerPsClean
    fi

    docker-clean
}

dockerExec()
{
    if [[ -e $(pwd)/docker-compose.yml ]]; then
        if [[ -z $1 ]]; then
            echo "You need to give me a server"
            docker-compose ps
        else
            docker-compose exec $1 bash
        fi
    else
        docker exec "${PWD##/}"_build bash
    fi
}

dockerLogs()
{
    if [[ -e $(pwd)/docker-compose.yml ]]; then
        if [[ -z $1 ]]; then
            docker-compose logs -f
        else
            docker-compose logs -f $1
        fi
    else
        docker logs -f
    fi
}

dockerAWS()
{
  repoName=$1
  accountNumber=$2
  location=$3

  AWSCred=$(aws ecr get-login --no-include-email --region $3)
  docker build -t $1 .
  docker tag $1:latest $2.dkr.$3.amazonaws.com/$1:latest
  docker push $2.dkr.ecr.$3/$1:latest
}

dockerRestart()
{
    if [[ -e $(pwd)/docker-compose.yml ]]; then
        if [[ -z $1 ]]; then
            dockerStop
            dockerStart
        else
            docker-compose stop $1
            docker-compose up -d $1
        fi
    else
        dockerStop
        dockerStart
    fi
}

updateSys()
{
    upgrade_oh_my_zsh
    brew update
    brew upgrade
    brew cask outdated
    mas outdated
    brew cleanup
}

cleanOpenWith()
{
    /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user
    killall Finder
}

digga()
{
    dig +nocmd "$1" ANY +multiline +noall +answer
}

